---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
This is a report answering the questions of Assignment 1 of the course "Reproducible Research". It includes the necessary code to process the data and generate all shown outputs and a desciption of each step.
## Loading and preprocessing the data
Load data from csv file, which must be located in the working directory.
```{r}
file.name <- "activity.csv"
data <- read.csv(file.name, stringsAsFactors = F)
```
Investigate data file
```{r}
head(data)
lapply(data, class) #check class of data
summary(data)
sum(is.na(data$steps)) #check number of NAs
```
Transfrom date stored as character into date format
```{r}
data$date <- as.Date(data$date, "%Y-%m-%d")
head(data)
lapply(data, class) #check class of data
```
## What is mean total number of steps taken per day?
Create data frame with sum of steps per day.
Alternative 1 uses tapply based on date as factor:
```{r}
date <- levels(as.factor(data$date)) #creates date vector
steps <- tapply(data$steps, as.factor(data$date), sum, na.rm = F) #creates vector with number of steps per day
data.perday1 <- data.frame(date = date, steps = steps)
head(data.perday1)
str(data.perday1)
sum(is.na(data.perday1$steps)) #check number of NAs
```
Alternative 2 uses xtabs:
```{r}
data.perday2 <- with(data, xtabs(steps ~ date))
data.perday2 <- as.data.frame(data.perday2)
head(data.perday2)
str(data.perday2)
sum(is.na(data.perday2)) #check number of NAs. NAs already removed by xtabs
```
Create histogram of steps per day using ggplot2 package
```{r}
data.range <- with(data.perday1, max(steps, na.rm = T) - min(steps, na.rm = T))
data.range #calculate data range to determine useful breaks
data.range/4 #approximate bindwidth
library(ggplot2) #Load ggplot2 package. ggplot2 must be installed.
plot1 <- ggplot(data.perday1, aes(steps))
print1 <- plot1 + geom_histogram(breaks = seq(0, 25000, 5000)) +
labs(title = "Histogram of steps per day")
print1
```
The total number of steps is `r format(sum(data.perday1$steps, na.rm = T), format = "f")`.
Calculate and report the mean and median of the total number of steps taken per day
```{r}
mean.per.day <- mean(data.perday1[, 2], na.rm = T)
median.per.day <- median(data.perday1[, 2], na.rm = T)
```
The mean of the total number of steps taken per day is `r format(mean.per.day, format = "f")`.
The median of the total number of steps taken per day is `r median.per.day`.
## What is the average daily activity pattern?
Calculate daily pattern
```{r}
library(dplyr) #load dplyr package which must be installed already
data.grouped <- group_by(data, interval) #group data by interval
daily.pattern <- summarise(data.grouped, mean(steps, na.rm = T))
names(daily.pattern)[2] <- "meanSteps"
```
Create time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
plot2 <- ggplot(daily.pattern, aes(interval, meanSteps))
print2 <- plot2 + geom_line()
print2
```
Determine 5-minute interval which, on average across all the days in the dataset, contains the maximum number of steps
```{r}
daily.peak <- daily.pattern[with(daily.pattern, (which.max(meanSteps))), 1]
daily.peak
```
The interval with the maximum number of steps is `r daily.peak`.
## Imputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
NAs <- sum(is.na(data$steps)) #number of NAs
```
The number of NAs is `r NAs`.
Fill in NAs using the mean for that 5-minute invterval across all days
```{r}
daily.pattern.rep <- unlist((rep(daily.pattern[, 2], times = 61))) #prepare vector with daily pattern 61 times to match length of data frame
NA.vector <- which(is.na(data$steps)) #create vector with index of NA values
data.imp.NA <- data #prepare new data frame to impute NA values
data.imp.NA[NA.vector, 1] <- daily.pattern.rep[NA.vector] #replace NA values using mean for 5-minute interval across all days ("daily.pattern")
head(data.imp.NA)
sum(is.na(data.imp.NA$steps)) #check for NAs
```
Prepare data for histogram of the total number of steps taken each day
```{r}
date <- levels(as.factor(data.imp.NA$date)) #creates date vector
steps <- tapply(data.imp.NA$steps, as.factor(data.imp.NA$date), sum, na.rm = F) #creates vector with number of steps per day
data.perday.imp.NA <- data.frame(date = date, steps = steps)
head(data.perday.imp.NA)
```
Create histogram of steps per day using ggplot2 package
```{r}
data.range <- with(data.perday.imp.NA, max(steps, na.rm = T) - min(steps, na.rm = T))
data.range #calculate data range to determine useful breaks
data.range/4 #approximate bindwidth
library(ggplot2) #Load ggplot2 package. ggplot2 must be installed.
plot1 <- ggplot(data.perday.imp.NA, aes(steps))
print1 <- plot1 + geom_histogram(breaks = seq(0, 25000, 5000)) +
labs(title = "Histogram of steps per day")
print1
```
The total number of steps after imputing NA values is `r format(sum(data.perday.imp.NA$steps), format = "f")` (old values is `r format(sum(data.perday1$steps, na.rm = T), format = "f")`).
Calculate and report the mean and median of the total number of steps taken per day.
```{r}
mean.per.day.imp.NA <- mean(data.perday.imp.NA[, 2], na.rm = T)
median.per.day.imp.NA <- median(data.perday.imp.NA[, 2], na.rm = T)
```
The new mean of the total number of steps taken per day after imputing NA values is `r format(mean.per.day.imp.NA, format = "f")` (old values is `r format(mean.per.day, format = "f")`)
The new median of the total number of steps taken per day after imputing NA values is `r format(median.per.day.imp.NA, format = "f")` (old value is `r median.per.day`).
The mean remains unchanged because NA values were imputed using the mean for the 5-minute interval across all days.
## Are there differences in activity patterns between weekdays and weekends?
setwd("C:/Users/Aditya Lukas/Desktop/Data science specialization/5 Reproducible Research/Assignment W1/RepData_PeerAssessment1")
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
This is a report answering the questions of Assignment 1 of the course "Reproducible Research". It includes the necessary code to process the data and generate all shown outputs and a desciption of each step.
## Loading and preprocessing the data
Load data from csv file, which must be located in the working directory.
```{r}
file.name <- "activity.csv"
data <- read.csv(file.name, stringsAsFactors = F)
```
Investigate data file
```{r}
head(data)
lapply(data, class) #check class of data
summary(data)
sum(is.na(data$steps)) #check number of NAs
```
Transfrom date stored as character into date format
```{r}
data$date <- as.Date(data$date, "%Y-%m-%d")
head(data)
lapply(data, class) #check class of data
```
## What is mean total number of steps taken per day?
Create data frame with sum of steps per day.
Alternative 1 uses tapply based on date as factor:
```{r}
date <- levels(as.factor(data$date)) #creates date vector
steps <- tapply(data$steps, as.factor(data$date), sum, na.rm = F) #creates vector with number of steps per day
data.perday1 <- data.frame(date = date, steps = steps)
head(data.perday1)
str(data.perday1)
sum(is.na(data.perday1$steps)) #check number of NAs
```
Alternative 2 uses xtabs:
```{r}
data.perday2 <- with(data, xtabs(steps ~ date))
data.perday2 <- as.data.frame(data.perday2)
head(data.perday2)
str(data.perday2)
sum(is.na(data.perday2)) #check number of NAs. NAs already removed by xtabs
```
Create histogram of steps per day using ggplot2 package
```{r}
data.range <- with(data.perday1, max(steps, na.rm = T) - min(steps, na.rm = T))
data.range #calculate data range to determine useful breaks
data.range/4 #approximate bindwidth
library(ggplot2) #Load ggplot2 package. ggplot2 must be installed.
plot1 <- ggplot(data.perday1, aes(steps))
print1 <- plot1 + geom_histogram(breaks = seq(0, 25000, 5000)) +
labs(title = "Histogram of steps per day")
print1
```
The total number of steps is `r format(sum(data.perday1$steps, na.rm = T), format = "f")`.
Calculate and report the mean and median of the total number of steps taken per day
```{r}
mean.per.day <- mean(data.perday1[, 2], na.rm = T)
median.per.day <- median(data.perday1[, 2], na.rm = T)
```
The mean of the total number of steps taken per day is `r format(mean.per.day, format = "f")`.
The median of the total number of steps taken per day is `r median.per.day`.
## What is the average daily activity pattern?
Calculate daily pattern
```{r}
library(dplyr) #load dplyr package which must be installed already
data.grouped <- group_by(data, interval) #group data by interval
daily.pattern <- summarise(data.grouped, mean(steps, na.rm = T))
names(daily.pattern)[2] <- "meanSteps"
```
Create time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
plot2 <- ggplot(daily.pattern, aes(interval, meanSteps))
print2 <- plot2 + geom_line()
print2
```
Determine 5-minute interval which, on average across all the days in the dataset, contains the maximum number of steps
```{r}
daily.peak <- daily.pattern[with(daily.pattern, (which.max(meanSteps))), 1]
daily.peak
```
The interval with the maximum number of steps is `r daily.peak`.
## Imputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
NAs <- sum(is.na(data$steps)) #number of NAs
```
The number of NAs is `r NAs`.
Fill in NAs using the mean for that 5-minute invterval across all days
```{r}
daily.pattern.rep <- unlist((rep(daily.pattern[, 2], times = 61))) #prepare vector with daily pattern 61 times to match length of data frame
NA.vector <- which(is.na(data$steps)) #create vector with index of NA values
data.imp.NA <- data #prepare new data frame to impute NA values
data.imp.NA[NA.vector, 1] <- daily.pattern.rep[NA.vector] #replace NA values using mean for 5-minute interval across all days ("daily.pattern")
head(data.imp.NA)
sum(is.na(data.imp.NA$steps)) #check for NAs
```
Prepare data for histogram of the total number of steps taken each day
```{r}
date <- levels(as.factor(data.imp.NA$date)) #creates date vector
steps <- tapply(data.imp.NA$steps, as.factor(data.imp.NA$date), sum, na.rm = F) #creates vector with number of steps per day
data.perday.imp.NA <- data.frame(date = date, steps = steps)
head(data.perday.imp.NA)
```
Create histogram of steps per day using ggplot2 package
```{r}
data.range <- with(data.perday.imp.NA, max(steps, na.rm = T) - min(steps, na.rm = T))
data.range #calculate data range to determine useful breaks
data.range/4 #approximate bindwidth
library(ggplot2) #Load ggplot2 package. ggplot2 must be installed.
plot1 <- ggplot(data.perday.imp.NA, aes(steps))
print1 <- plot1 + geom_histogram(breaks = seq(0, 25000, 5000)) +
labs(title = "Histogram of steps per day")
print1
```
The total number of steps after imputing NA values is `r format(sum(data.perday.imp.NA$steps), format = "f")` (old values is `r format(sum(data.perday1$steps, na.rm = T), format = "f")`).
Calculate and report the mean and median of the total number of steps taken per day.
```{r}
mean.per.day.imp.NA <- mean(data.perday.imp.NA[, 2], na.rm = T)
median.per.day.imp.NA <- median(data.perday.imp.NA[, 2], na.rm = T)
```
The new mean of the total number of steps taken per day after imputing NA values is `r format(mean.per.day.imp.NA, format = "f")` (old values is `r format(mean.per.day, format = "f")`)
The new median of the total number of steps taken per day after imputing NA values is `r format(median.per.day.imp.NA, format = "f")` (old value is `r median.per.day`).
The mean remains unchanged because NA values were imputed using the mean for the 5-minute interval across all days.
## Are there differences in activity patterns between weekdays and weekends?
View(data.perday1)
View(data.perday1)
View(data)
View(data)
weekdays(data$date)
weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday"
is.weekend <- weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday"
is.weekend <- as.factor(weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday")
```
is.weekend <- weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday"
is.weekend
day.type[logical.vector] <- "weekend"
vector(day.type)
vector?
?vector
?vector
vector(modes = logical)
vector(mode = logical)
?vector
day.type <- vector(mode = logical)
day.type <- vector(mode = "logical"")
day.type <- vector(mode = "logical")
?vector
day.type <- vector(mode = "logical")
day.type[logical.vector] <- "weekend"
day.type <- vector(mode = "character")
day.type[logical.vector] <- "weekend"
logical.vector <- weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday"
logical.vector <- weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday"
day.type <- vector(mode = "character")
day.type[logical.vector] <- "weekend"
day.type[!logical.vector] <- "weekday"
day.type
levels(day.type)
as.factor(day.type)
day.type <- as.factor(day.type)
daily.pattern
str(day.type)
summary(day.type)
data.imp.NA <- cbind(data.imp.NA, day.type)
head(data.imp.NA)
xtabs(data.imp.NA, steps ~ day.type)
data.imp.NA <- cbind(data.imp.NA, day.type)
head(data.imp.NA)
xtabs(data.imp.NA, steps ~ day.type)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
This is a report answering the questions of Assignment 1 of the course "Reproducible Research". It includes the necessary code to process the data and generate all shown outputs and a desciption of each step.
## Loading and preprocessing the data
Load data from csv file, which must be located in the working directory.
```{r}
file.name <- "activity.csv"
data <- read.csv(file.name, stringsAsFactors = F)
```
Investigate data file
```{r}
head(data)
lapply(data, class) #check class of data
summary(data)
sum(is.na(data$steps)) #check number of NAs
```
Transfrom date stored as character into date format
```{r}
data$date <- as.Date(data$date, "%Y-%m-%d")
head(data)
lapply(data, class) #check class of data
```
## What is mean total number of steps taken per day?
Create data frame with sum of steps per day.
Alternative 1 uses tapply based on date as factor:
```{r}
date <- levels(as.factor(data$date)) #creates date vector
steps <- tapply(data$steps, as.factor(data$date), sum, na.rm = F) #creates vector with number of steps per day
data.perday1 <- data.frame(date = date, steps = steps)
head(data.perday1)
str(data.perday1)
sum(is.na(data.perday1$steps)) #check number of NAs
```
Alternative 2 uses xtabs:
```{r}
data.perday2 <- with(data, xtabs(steps ~ date))
data.perday2 <- as.data.frame(data.perday2)
head(data.perday2)
str(data.perday2)
sum(is.na(data.perday2)) #check number of NAs. NAs already removed by xtabs
```
Create histogram of steps per day using ggplot2 package
```{r}
data.range <- with(data.perday1, max(steps, na.rm = T) - min(steps, na.rm = T))
data.range #calculate data range to determine useful breaks
data.range/4 #approximate bindwidth
library(ggplot2) #Load ggplot2 package. ggplot2 must be installed.
plot1 <- ggplot(data.perday1, aes(steps))
print1 <- plot1 + geom_histogram(breaks = seq(0, 25000, 5000)) +
labs(title = "Histogram of steps per day")
print1
```
The total number of steps is `r format(sum(data.perday1$steps, na.rm = T), format = "f")`.
Calculate and report the mean and median of the total number of steps taken per day
```{r}
mean.per.day <- mean(data.perday1[, 2], na.rm = T)
median.per.day <- median(data.perday1[, 2], na.rm = T)
```
The mean of the total number of steps taken per day is `r format(mean.per.day, format = "f")`.
The median of the total number of steps taken per day is `r median.per.day`.
## What is the average daily activity pattern?
Calculate daily pattern
```{r}
library(dplyr) #load dplyr package which must be installed already
data.grouped <- group_by(data, interval) #group data by interval
daily.pattern <- summarise(data.grouped, mean(steps, na.rm = T))
names(daily.pattern)[2] <- "meanSteps"
```
Create time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
plot2 <- ggplot(daily.pattern, aes(interval, meanSteps))
print2 <- plot2 + geom_line()
print2
```
Determine 5-minute interval which, on average across all the days in the dataset, contains the maximum number of steps
```{r}
daily.peak <- daily.pattern[with(daily.pattern, (which.max(meanSteps))), 1]
daily.peak
```
The interval with the maximum number of steps is `r daily.peak`.
## Imputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
NAs <- sum(is.na(data$steps)) #number of NAs
```
The number of NAs is `r NAs`.
Fill in NAs using the mean for that 5-minute invterval across all days
```{r}
daily.pattern.rep <- unlist((rep(daily.pattern[, 2], times = 61))) #prepare vector with daily pattern 61 times to match length of data frame
NA.vector <- which(is.na(data$steps)) #create vector with index of NA values
data.imp.NA <- data #prepare new data frame to impute NA values
data.imp.NA[NA.vector, 1] <- daily.pattern.rep[NA.vector] #replace NA values using mean for 5-minute interval across all days ("daily.pattern")
head(data.imp.NA)
sum(is.na(data.imp.NA$steps)) #check for NAs
```
Prepare data for histogram of the total number of steps taken each day
```{r}
date <- levels(as.factor(data.imp.NA$date)) #creates date vector
steps <- tapply(data.imp.NA$steps, as.factor(data.imp.NA$date), sum, na.rm = F) #creates vector with number of steps per day
data.perday.imp.NA <- data.frame(date = date, steps = steps)
head(data.perday.imp.NA)
```
Create histogram of steps per day using ggplot2 package
```{r}
data.range <- with(data.perday.imp.NA, max(steps, na.rm = T) - min(steps, na.rm = T))
data.range #calculate data range to determine useful breaks
data.range/4 #approximate bindwidth
library(ggplot2) #Load ggplot2 package. ggplot2 must be installed.
plot1 <- ggplot(data.perday.imp.NA, aes(steps))
print1 <- plot1 + geom_histogram(breaks = seq(0, 25000, 5000)) +
labs(title = "Histogram of steps per day")
print1
```
The total number of steps after imputing NA values is `r format(sum(data.perday.imp.NA$steps), format = "f")` (old values is `r format(sum(data.perday1$steps, na.rm = T), format = "f")`).
Calculate and report the mean and median of the total number of steps taken per day.
```{r}
mean.per.day.imp.NA <- mean(data.perday.imp.NA[, 2], na.rm = T)
median.per.day.imp.NA <- median(data.perday.imp.NA[, 2], na.rm = T)
```
The new mean of the total number of steps taken per day after imputing NA values is `r format(mean.per.day.imp.NA, format = "f")` (old values is `r format(mean.per.day, format = "f")`)
The new median of the total number of steps taken per day after imputing NA values is `r format(median.per.day.imp.NA, format = "f")` (old value is `r median.per.day`).
The mean remains unchanged because NA values were imputed using the mean for the 5-minute interval across all days.
## Are there differences in activity patterns between weekdays and weekends?
Create a new factor variable in the dataset with two levels - "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
```{r}
logical.vector <- weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday" #logical vector, TRUE if Saturday or Sunday
day.type <- vector(mode = "character") #create character vector
day.type[logical.vector] <- "weekend"
day.type[!logical.vector] <- "weekday"
day.type <- as.factor(day.type)
data.imp.NA <- cbind(data.imp.NA, day.type)
head(data.imp.NA)
```
Create time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekdays and weekend, respectively (y-axis)
```{r}
xtabs(data.imp.NA, steps ~ day.type)
plot2 <- ggplot(daily.pattern, aes(interval, meanSteps))
print2 <- plot2 + geom_line()
print2
```
xtabs(data.imp.NA, steps ~ day.type)
head(data.imp.NA)
with(data, xtabs(steps ~ date))
with(data.imp.NA, xtabs(steps ~ date))
with(data.imp.NA, xtabs(steps ~ day.type))
namems(data.imp.NA)
names(data.imp.NA)
with(data.imp.NA, xtabs(steps ~ date + day.type))
with(data.imp.NA, xtabs(steps ~ interval + day.type))
names(data.imp.NA)
group_by(data.perday.imp.NA, day.type)
group_by(data.imp.NA, day.type)
summarise(group_by(data.imp.NA, day.type), mean(steps))
summarise(group_by(data.imp.NA, day.type, date), mean(steps))
summarise(group_by(data.imp.NA, inerval, day.type), mean(steps))
summarise(group_by(data.imp.NA, interval, day.type), mean(steps))
daily.pattern.week <- summarise(group_by(data.imp.NA, interval, day.type), mean(steps))
plot2 <- ggplot(daily.pattern, aes(interval, meanSteps))
```{r}
names(data.imp.NA)
daily.pattern.week <- summarise(group_by(data.imp.NA, interval, day.type), mean(steps))
plot2 <- ggplot(daily.pattern.week, aes(interval, mean(steps))
print2 <- plot2 + geom_line() + facet_wrat(~type)
print2
daily.pattern.week <- summarise(group_by(data.imp.NA, interval, day.type), mean(steps))
View(daily.pattern.week)
View(daily.pattern.week)
?rename
names(daily.pattern.week)
names(daily.pattern.week)[3]
names(daily.pattern.week)[3] <- meanSteps
names(daily.pattern.week)[3] <- "meanSteps""
names(daily.pattern.week)[3] <- "meanSteps"
names(daily.pattern.week)[3] <- "meanSteps"
plot2 <- ggplot(daily.pattern.week, aes(interval, meanSteps)
)
print2 <- plot2 + geom_line() + facet_wrat(~type)
print2 <- plot2 + geom_line() + facet_wrap(~type)
print2
plot2 <- ggplot(daily.pattern.week, aes(interval, meanSteps, type))
print2 <- plot2 + geom_line() + facet_wrap(~type)
print2
View(daily.pattern.week)
View(daily.pattern.week)
print2 <- plot2 + geom_line() + facet_wrap(~day.type)
print2
print2 <- plot2 + geom_line() + facet_wrap(~day.type, 2)
print2
daily.pattern.week <- summarise(group_by(data.imp.NA, interval, day.type), mean(steps))
names(daily.pattern.week)[3] <- "meanSteps"
plot2 <- ggplot(daily.pattern.week, aes(interval, meanSteps))
print2 <- plot2 + geom_line() + facet_wrap(~day.type, 2) + labs(title = "Average number of steps taken over time during a day", x = "Interval", y = "Number of steps")
print2
